#
# Copyright (c) 2013, 2014, 2016 NORDUnet A/S. All rights reserved.
# Copyright 2012 Roland Hedberg. All rights reserved.
#
# See the file eduid-IdP/LICENSE.txt for license statement.
#
# Author : Fredrik Thulin <fredrik@thulin.net>
#          Roland Hedberg
#

import pprint
from html import escape
from datetime import datetime
from typing import Dict

from saml2.request import AuthnRequest

from eduid_userdb.credentials import Credential


class SSOLoginData(object):
    """
    Class to hold data about an ongoing login process - i.e. data relating to a
    particular IdP visitor in the process of logging in, but not yet fully logged in.

    :param key: unique reference for this instance
    :param req_info: pysaml2 AuthnRequest data
    :param data: dict
    """
    def __init__(self, key: str, req_info: AuthnRequest, data: dict, binding: str):
        self._key = key
        self._req_info = req_info
        self._SAMLRequest = data['SAMLRequest']
        self._RelayState = data.get('RelayState', '')
        self._FailCount = data.get('FailCount', 0)
        self._binding = binding
        # dict to transfer data about credentials successfully used from the MFA plugin
        # to the IdP code, where it will be transferred to the SSO session
        self.mfa_action_creds: Dict[Credential, datetime] = {}

    def __str__(self):
        data = self.to_dict()
        if 'SAMLRequest' in data:
            data['SAMLRequest length'] = len(data['SAMLRequest'])
            del data['SAMLRequest']
        return pprint.pformat(data)

    def to_dict(self):
        res = {'key': self._key,
               'req_info': self._req_info,
               'SAMLRequest': self._SAMLRequest,
               'RelayState': self._RelayState,
               'binding': self._binding,
               'FailCount': self._FailCount,
               }
        return res

    @property
    def key(self):
        """
        Unique reference for this instance. Used for storing SSOLoginData instances
        in SSOLoginDataCache.
        :rtype: string
        """
        return escape(self._key, quote=True)

    @property
    def SAMLRequest(self):
        """
        The SAML request in transport encoding (base 64).

        :rtype : string
        """
        return escape(self._SAMLRequest, quote=True)

    @property
    def req_info(self):
        """
        req_info is SAMLRequest, but parsed

        :rtype: AuthnRequest
        """
        return self._req_info

    @property
    def RelayState(self):
        """
        This is an opaque string generated by a SAML SP that must be sent to the
        SP when the authentication is finished and the user redirected to the SP.

        :rtype: string
        """
        return escape(self._RelayState, quote=True)

    @property
    def FailCount(self):
        """
        The number of failed login attempts. Used to show an alert message to the
        user to make them aware of the reason they got back to the IdP login page.

        :rtype: int
        """
        return self._FailCount

    @FailCount.setter
    def FailCount(self, value):
        """
        Set the FailCount.

        :param value: new value
        :type value: int
        """
        assert isinstance(value, int)
        self._FailCount = value

    @property
    def binding(self):
        """
        binding this request was received with

        :rtype: string
        """
        return escape(self._binding, quote=True)
